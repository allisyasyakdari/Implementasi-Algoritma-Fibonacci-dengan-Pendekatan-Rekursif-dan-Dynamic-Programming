#include <bits/stdc++.h>

int fibonacciRecursive(int n) {
    if (n <= 1)
        return n;
    return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);
}

int fibonacciDP(int n) {
    if (n <= 1)
        return n;
    std::vector<int> fib(n + 1);
    fib[0] = 0;
    fib[1] = 1;
    for (int i = 2; i <= n; ++i) {
        fib[i] = fib[i - 1] + fib[i - 2];
    }
    return fib[n];
}
void measureExecutionTime(int (*fibFunc)(int), int n, const std::string& method) {
    auto start = std::chrono::high_resolution_clock::now();
    int result = fibFunc(n);
    auto end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double, std::micro> execTime = end - start;
    std::cout << "Fibonacci(" << n << ") using " << method << ": " << result << ", Time: " << execTime.count() << " Î¼s" << std::endl;
}

int main() {
    std::vector<int> testValues = {10, 25, 30, 40, 50};

    for (int n : testValues) {
        measureExecutionTime(fibonacciRecursive, n, "Recursive");
        measureExecutionTime(fibonacciDP, n, "Dynamic Programming");
        std::cout << "--------------------------" << std::endl;
    }

    return 0;
}
